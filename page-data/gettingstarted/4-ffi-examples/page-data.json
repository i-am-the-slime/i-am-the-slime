{"componentChunkName":"component---src-templates-docs-js","path":"/gettingstarted/4-ffi-examples","result":{"data":{"site":{"siteMetadata":{"title":"Mark's Posts","docsLocation":"https://github.com/i-am-the-slime/i-am-the-slime.github.io/tree/master/content"}},"mdx":{"fields":{"id":"08073180-69b0-5fe5-8093-8751a6b29aa2","title":"Examples for FFI","slug":"/gettingstarted/4-ffi-examples"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Examples for FFI\",\n  \"metaTitle\": \"This shows some examples of how to interact with Go\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Import a String\"), mdx(\"p\", null, \"Purescript:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ps\"\n  }), \"foreign import aString :: String\\n\")), mdx(\"p\", null, \"Go:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"exports[\\\"aString\\\"] = \\\"hi!\\\"\\n\")), mdx(\"h3\", null, \"Function from String to Int\"), mdx(\"p\", null, \"Purescript:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ps\"\n  }), \"foreign import strLen :: String -> Int\\n\")), mdx(\"p\", null, \"Go:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"exports[\\\"strLen\\\"] = func(_str Any) Any {\\n  str := _str.(string)\\n  return len(str)\\n}\\n\")), mdx(\"p\", null, \"In this example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"len\"), \" needs a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string\"), \". Therefore we need to use an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FFI\"), \" pattern where we precede the argument name with an underscore (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_str\"), \") and then cast to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"string\"), \" further down. The other direction of widening the type of the result of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"len(str)\"), \" is no problem and there is no cast needed to go from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"int\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Any\"), \".\"), mdx(\"h3\", null, \"Functions with multiple parameters\"), mdx(\"p\", null, \"Purescript:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ps\"\n  }), \"foreign import addInts :: Int -> Int -> Int\\n\")), mdx(\"p\", null, \"Go:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"exports[\\\"addInts\\\"] = func(_n1 Any) Any {\\n  return func(_n2 Any) Any {\\n    n1 := _n1.(int)\\n    n2 := _n2.(int)\\n    return n1 + n2\\n  }\\n\")), mdx(\"p\", null, \"Be careful to always specify a return type with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Any\"), \".\"), mdx(\"p\", null, \"Because functions in PureScript are always curried the FFI for functions with multiple arguments becomes quite unwieldy.\"), mdx(\"p\", null, \"To make this more bearable you can install the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"functions\"), \" library with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"spago install functions\"), \".\\nThen the following works:\"), mdx(\"p\", null, \"Purescript:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ps\"\n  }), \"foreign import add3IntsImpl :: Fn3 Int Int Int Int\\n\\nadd3Ints :: Int -> Int -> Int -> Int\\nadd3Ints = runFn3 addIntsUncurried\\n\")), mdx(\"p\", null, \"Go:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"exports[\\\"add3IntsImpl\\\"] = func(_n1 Any, _n2 Any, _n3 Any) Any {\\n    n1 := _n1.(int)\\n    n2 := _n2.(int)\\n    n3 := _n3.(int)\\n    return n1 + n2 + n3\\n}\\n\")), mdx(\"h3\", null, \"Importing types\"), mdx(\"p\", null, \"Let's take the example of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sql\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#import-a-string","title":"Import a String"},{"url":"#function-from-string-to-int","title":"Function from String to Int"},{"url":"#functions-with-multiple-parameters","title":"Functions with multiple parameters"},{"url":"#importing-types","title":"Importing types"}]},"parent":{"relativePath":"gettingstarted/4-ffi-examples.md"},"frontmatter":{"metaTitle":"This shows some examples of how to interact with Go","metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/gettingstarted","title":"PureScript Native"}}},{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/gettingstarted/2-editor-setup","title":"Setting up an Editor"}}},{"node":{"fields":{"slug":"/gettingstarted/1-setup","title":"Getting started"}}},{"node":{"fields":{"slug":"/gettingstarted/3-talking-to-go","title":"Talking with Go"}}},{"node":{"fields":{"slug":"/gettingstarted/4-ffi-examples","title":"Examples for FFI"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"08073180-69b0-5fe5-8093-8751a6b29aa2"}}}